input {
  # http {
  #   # port => 8181
  #   port => "${LOGSTASH_PORT:8181}"
  #   type => "syslog"
  #   codec => json {

  #   }

  # }
  stdin{
    type => "syslog"
  }
}

filter {
  if [type] == "syslog" {
    mutate {
      copy => { "@timestamp" => "event.created" }
      copy => { "host" => "host.hostname" }
      remove_field => ["@timestamp","host"]
    }

    grok {
      match => { 
        "message" => [
      # Jul 23 16:37:44 192.168.1.236 Jul 23 16:37:44 splunk systemd[1]: plymouth-quit.service: Deactivated successfully.
         
          "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} %{SYSLOGTIMESTAMP} %{SYSLOGHOST:hostname} %{DATA:process.name}\[%{NUMBER:process.pid}\]: %{GREEDYDATA:log_message}",
          "%{SYSLOGTIMESTAMP:timestamp} %{IP:ip1} %{SYSLOGTIMESTAMP:timestamp2} %{SYSLOGHOST:hostname} %{WORD:process.name}: %{USER:user} : TTY=%{NOTSPACE:tty} ; PWD=%{PATH:pwd} ; USER=%{USER:sudo_user} ; COMMAND=%{GREEDYDATA:command}",
          "%{SYSLOGTIMESTAMP:timestamp} %{WORD:program} \(%{WORD:process.name}\): %{GREEDYDATA:log_message}",
          "%{GREEDYDATA:log_message}"
        ]
      }
    }

    if [log_message] {
      grok {
        match => {
          "log_message" => [
            "%{SYSLOGTIMESTAMP:timestamp} %{IP:ip1} %{SYSLOGTIMESTAMP:timestamp2} %{SYSLOGHOST:hostname} %{WORD:process}\[%{NUMBER:pid}\]: pam_unix\(%{WORD:service}:session\): session opened for user %{USER:user}\(uid=%{NUMBER:uid}\) by \(uid=%{NUMBER:by_uid}\)",
            "\(%{USER:user}\) %{CRON_ACTION:[system][cron][action]} \(%{DATA:[system][cron][command]}\)",
            "%{WORD:status} password for %{USER:user} from %{IP:source_ip} port %{NUMBER:destination_port} %{WORD:protocol}",
            "%{TIME:time} %{LOGLEVEL:loglevel}  %{DATA:component} - \(#%{NUMBER:attempt}\) %{GREEDYDATA:message_body}",
            "PAM %{NUMBER:failures_count} more authentication failures; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{WORD:tty} ruser=%{DATA:ruser} rhost=%{IP:source_ip}  user=%{WORD:user}",
            "pam_unix\(%{WORD:service}:session\): session opened for user %{USER:user}\(uid=%{NUMBER:uid}\) by \(uid=%{NUMBER:by_uid}\)",
            "pam_unix\(%{WORD:service}:session\): session opened for user %{USER:user}\(uid=%{NUMBER:uid}\) by %{USER}\(uid=%{NUMBER:by_uid}\)",
            "pam_unix\(%{WORD:service}:session\): session closed for user %{USER:user}",
            "pam_unix\(%{WORD:service}:auth\): authentication failure; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{WORD:tty} ruser= rhost=%{IP:source_ip}  user=%{USER:user}",
            "rsyslogd: cannot connect to %{IP:destination.ip}:%{NUMBER:destination.port}: Connection refused \[%{NOTSPACE:event.version} try %{URI:url.original} \]",
            "Failed password for %{USER:user.name} from %{IP:source.ip} port %{NUMBER:network.port} %{WORD:ssh.protocol}",
            "Accepted password for %{USER:user.name} from %{IP:source.ip} port %{NUMBER:network.port} %{WORD:ssh.protocol}",
            "%{LOGLEVEL:loglevel}: %{WORD:failures_count} authentication attempts exceeded for %{USER:user} from %{IP:source.ip} port %{NUMBER:source.port} %{WORD:ssh.protocol} \[%{WORD:process.args}\]",
            "PAM service\(%{WORD:service}\) ignoring max retries; %{NUMBER:retry_count} > %{NUMBER:max_retries}",
            "New session %{DATA:session.id} of user %{USER:user.name}.",
            "\[%{LOGLEVEL:log.level} \] Socket %{NUMBER:socket}: %{DATA:protocol} connection received from %{IP:source.ip} port %{NUMBER:source.port}",
            # Connection closed by 192.168.1.42 port 39942 [preauth]
            "Connection closed by %{IP:source.ip} port %{NUMBER:source.port} \[preauth\]",
            # Unable to negotiate with 192.168.1.42 port 39924: no matching host key type found. Their offer: ecdsa-sha2-nistp384 [preauth]
            "Unable to negotiate with %{IP:source.ip} port %{NUMBER:source.port}: no matching host key type found. Their offer: ecdsa-sha2-nistp384 \[preauth\]",
            "%{GREEDYDATA}"
            ]
        }
      }
    }
    mutate {
    lowercase => ["log_message"]
  }

  if "authentication failure" in [log_message] or "failed password" in [log_message] or "authentication attempts exceeded" in [log_message]{
     mutate {
        add_field => { 
          "[event][type]" => ["access","denied"]
          "[event][action]" =>"user_login"
          "[event][category]"=>["authentication"]
          "[event][outcome]"=>"failure"
          }
    }
  }
  else if "authentication success" in [log_message] or "accepted password" in [log_message] {
   mutate {
        add_field => { 
          "[event][type]" => ["access","allowed"]
          "[event][category]"=>["authentication"]
          "[event][outcome]"=>"success"
          "[event][action]" =>"user_login"
        }
    }
  }
  else if "ignoring max retries" in [log_message] {
   mutate {
        add_field => { 
          "[event][action]" => "authentication_configuration_change"
          "[event][category]"=>["authentication"]
          "[event][type]"=>["change"]
        }
    }
  }
    mutate {
      remove_field => [
        "headers"
      # ,"message"
      ]
    }
  if "connection refused" in [log_message] {
    mutate {
        add_field => { 
          "[event][type]" => ["denied"]
          "[event][category]"=>["network","connection"]
        }
  }}
  if "connection recieved" in [log_message] {
    mutate {
        add_field => { 
          "[event][action]" => "connection_recieved"
          "[event][category]"=>["network","connection"]
        }
  }}

  if "new session" in [log_message] {
    mutate {
        add_field => { 
          "[event][type]" => ["creation"]
          "[event][category]"=>["session"]
        }
  }}
   if "connection closed by" in [log_message] or "no matching host key type found" in [log_message] {
    mutate {
        add_field => { 
          "[event][type]" => ["start"]
          "[event][category]"=>["network"]
          "[event][action]"=>"connection_attempted"
        }
  }}
  if "encrypt" in [log_message] or "decrypt" in [log_message] or "coin" in [log_message] or "crypto" in [log_message]{
    mutate {
        add_field => { 
          "[event][type]" => ["indicator"]
          "[event][category]"=>["threat","intrusion_detection","vulnerability","malware"]
          "[event][action]" => "ransom"
        }
        copy => {
          "event.created" => "timestamp"
        }
  }}
    date {
      match => ["timestamp", "MMM dd HH:mm:ss","MMM  d HH:mm:ss","ISO8601"]
      target => "@timestamp"
      locale => "en"
    }
  
}
}

output {  
  # elasticsearch {
  #       # hosts => "http://192.168.1.103:9200"
  #       hosts=> "${ELASTIC_HOST:127.0.0.1:9200}"
  #       index => "%{index}"
  # }
  stdout{}
}

#Jul 23 13:23:00 192.168.1.30 Jul 23 18:23:00 ubuntu16 sudo: vboxuser : TTY=pts/26 ; PWD=/home/vboxuser ; USER=root ; COMMAND=/usr/bin/apt purge python3-pip
#%{SYSLOGTIMESTAMP:timestamp1} %{IP:ip1} %{SYSLOGTIMESTAMP:timestamp2} %{SYSLOGHOST:hostname} %{WORD:process}: %{WORD:auth_type}\(%{WORD:auth_mechanism}\): session %{WORD:session_state} for user %{USER:user} by %{USER:by_user}\(uid=%{NUMBER:uid}\)
  # "substring1" in [message] or "substring2" in [message]
   # "%{SYSLOGTIMESTAMP:timestamp} %{IP:host} %{SYSLOGTIMESTAMP} %{SYSLOGHOST:log_source} %{WORD:process}\[%{NUMBER:pid}\]: %{TIME:time} %{LOGLEVEL:loglevel}  %{DATA:component} - \(#%{NUMBER:attempt}\) %{GREEDYDATA:message_body}",
          # "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} %{SYSLOGTIMESTAMP:t2}%{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}",
# Jul 23 12:30:45 192.168.1.30 Jul 23 17:30:45 ubuntu16 sshd[13723]: PAM 4 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser=someuser rhost=192.168.1.39  user=vboxuser
