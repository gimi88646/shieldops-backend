input {
  http {
    # port => 8181
    port => "${LOGSTASH_PORT:8181}"
    # type => "syslog"
    # type => "winlog"
    codec => json {

    }

  }
  # stdin{
  #   type => "winlog"
  # }
}
# 
# 
  # 
filter {
  if [log_type] == "WinEventLog" {
    mutate {
      copy => {
        "@timestamp" => "event.created"
      }
      remove_field => ["@timestamp","host","headers"]
      add_field => { 
          "[host.hostname]" => "%{computername}"
          "[event][code]" => "%{eventcode}"
          "[event][type]" => "%{eventtype}"
          "[winlog.keywords]" => "%{keywords}"
          "[log_name]" => "%{logname}"
          "[winlog.opcode]" => "%{opcode}"
          "[record_number]" => "%{recordnumber}"
          "[source][name]" => "%{sourcename}"
          "[task][category]" => "%{taskcategory}"
          "[log][type]" => "%{type}"
          }
    }
    if [sid]{
      mutate {
        add_field => {
          "[winlog.sid]" => "%{sid}"
          "[winlog.sid.type]" => "%{sidtype}"
        }
      }
    }
    if [error_code]{
      mutate {
        add_field => {
           "[error][code]" => "%{error_code}"
        }
      }
    }
  # Step 1: Extract the event code
    grok {
      match => {
        "raw_message" => "%{DATE:date} %{TIME:time} %{WORD:amorpm}%{GREEDYDATA}"
      }
    }
    
    ruby {
        init => "require 'time'"
          code => "
          date = event.get('date')
          time = event.get('time')
          amorpm = event.get('amorpm')
          datetime_string = date+time+amorpm
          puts datetime_string
          parsed_time = Time.strptime(datetime_string, '%m/%d/%Y%I:%M:%S%p')
          iso8601_format = parsed_time.iso8601
          event.set('timestamp',iso8601_format)
          "
        }
    # # Step 2: Conditional parsing based on the event code
    if [event][code] == "4648" {
      grok {
        match => {
          "message" => "A logon was attempted using explicit credentials.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.account.name}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.account.domain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logon.id}\r\n\tLogon GUID:\t\t%{GREEDYDATA:winlog.subject.logon.guid}\r\n\r\nAccount Whose Credentials Were Used:\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.destination.user.name}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.destination.domain}\r\n\tLogon GUID:\t\t%{NOTSPACE:winlog.destination.logon.guid}\r\n\r\nTarget Server:\r\n\tTarget Server Name:\t%{GREEDYDATA:winlog.destination.host.name}\r\n\tAdditional Information:\t%{GREEDYDATA:winlog.additional_info}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t%{DATA:winlog.process.pid}\r\n\tProcess Name:\t\t%{GREEDYDATA:winlog.process.name}\r\n\r\nNetwork Information:\r\n\tNetwork Address:\t%{GREEDYDATA:winlog.networkinformation.networkaddress}\r\n\tPort:\t\t\t%{DATA:winlog.networkinformation.networkport}\r\n\r\n%{GREEDYDATA:winlog.extra_info}"
        }
      }
    } else if [event][code] in ["6013", "6005", "3", "82224", "1100", "1101", "1104", "1108", "4609"] {
      grok {
        match => {
          "message" => "%{GREEDYDATA:log_message}"
        }
      }
    } else if [event][code] == "1102" {
      grok {
        match => {
          "message" => "%{GREEDYDATA:winlog.message}\r\nSubject:\r\nSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\nAccount Name:\t\t%{GREEDYDATA:winlog.user.name}\r\n\tDomain Name:\t\t%{GREEDYDATA:winlog.user.domain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.logon.id}"
        }
      }
    } else if [event][code] == "4608" {
      grok {
        match => {
          "message" => "%{GREEDYDATA:winlog.message}\r\n%{GREEDYDATA:extra_info}"
        }
      }
    } else if [event][code] == "4672"{
      grok {
        match => {
          "message" => "Special privileges assigned to new logon.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.account.name}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.account.domain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.logon.id}\r\n\r\nPrivileges:\t\tSeAssignPrimaryTokenPrivilege\r\n\t\t\tSeTcbPrivilege\r\n\t\t\tSeSecurityPrivilege\r\n\t\t\tSeTakeOwnershipPrivilege\r\n\t\t\tSeLoadDriverPrivilege\r\n\t\t\tSeBackupPrivilege\r\n\t\t\tSeRestorePrivilege\r\n\t\t\tSeDebugPrivilege\r\n\t\t\tSeAuditPrivilege\r\n\t\t\tSeSystemEnvironmentPrivilege\r\n\t\t\tSeImpersonatePrivilege\r\n\t\t\tSeDelegateSessionUserImpersonatePrivilege"
        }
      }
    } else if [event][code] == "4624"{
      grok {
        match => {

          "message" => "An account was successfully logged on.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nLogon Information:\r\n\tLogon Type:\t\t%{NUMBER:winlog.logontype}\r\n\tRestricted Admin Mode:\t%{DATA:winlog.restrictedadminmode}\r\n\tRemote Credential Guard:\t%{DATA:winlog.remotecredentialguard}\r\n\tVirtual Account:\t\t%{GREEDYDATA:winlog.virtualaccount}\r\n\tElevated Token:\t\t%{WORD:winlog.elevatedtoken}\r\n\r\nImpersonation Level:\t\t%{GREEDYDATA:winlog.impersonationlevel}\r\n\r\nNew Logon:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.newlogon.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.newlogon.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.newlogon.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.newlogon.logonid}\r\n\tLinked Logon ID:\t\t%{NOTSPACE:winlog.newlogon.linkedlogonid}\r\n\tNetwork Account Name:\t%{DATA:winlog.newlogon.networkaccountname}\r\n\tNetwork Account Domain:\t%{DATA:winlog.newlogon.networkaccountdomain}\r\n\tLogon GUID:\t\t%{NOTSPACE:winlog.newlogon.logonguid}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t%{NOTSPACE:winlog.process.id}\r\n\tProcess Name:\t\t%{NOTSPACE:winlog.process.name}\r\n\r\nNetwork Information:\r\n\tWorkstation Name:\t%{DATA:winlog.networkinformation.workstationname}\r\n\tSource Network Address:\t%{DATA:winlog.networkinformation.sourcenetworkaddress}\r\n\tSource Port:\t\t%{DATA:winlog.networkinformation.sourceport}\r\n\r\nDetailed Authentication Information:\r\n\tLogon Process:\t\t%{WORD:winlog.authinfo.logonprocess}  \r\n\tAuthentication Package:\t%{GREEDYDATA:winlog.authinfo.authenticationpackage}\r\n\tTransited Services:\t%{DATA:winlog.authinfo.transitedservices}\r\n\tPackage Name \(NTLM only\):\t%{DATA:winlog.authinfo.packagename}\r\n\tKey Length:\t\t%{NUMBER:winlog.authinfo.keylength}%{GREEDYDATA:winlog.extrainfo}
"

        }
      }
    } else if [event][code] == "4798"{
      grok {
        match => {
          "message" => "A user's local group membership was enumerated.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nUser:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.user.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.user.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.user.accountdomain}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tProcess Name:\t\t%{GREEDYDATA:winlog.processinformation.processname}"
        }
      }
    } else if [event][code] == "4907"{
      grok {
        match => {
          "message" => "Auditing settings on object were changed.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nObject:\r\n\tObject Server:\t%{GREEDYDATA:winlog.object.objectserver}\r\n\tObject Type:\t%{GREEDYDATA:winlog.object.objecttype}\r\n\tObject Name:\t%{NOTSPACE:winlog.object.objectname}\r\n\tHandle ID:\t%{NOTSPACE:winlog.object.handleid}\r\n\r\nProcess Information:\r\n\tProcess ID:\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tProcess Name:\t%{NOTSPACE:winlog.processinformation.processname}\r\n\r\nAuditing Settings:\r\n\tOriginal Security Descriptor:\t\r\n\tNew Security Descriptor:\t\t%{NOTSPACE:winlog.auditingsettings.newsecuritydescriptor}"
        }
      }
    } else if [event][code] == "8194"{
      grok {
        match => {
          "message" => "Successfully created restore point \(Process = %{NOTSPACE:winlog.process} %{GREEDYDATA:winlog.process.args}; Description = %{GREEDYDATA:winlog.description}\)."
        }
      }
    } else if [event][code] == "4799"{
      grok {
        match => {
          "message" => "A security-enabled local group membership was enumerated.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog..subject.logonid}\r\n\r\nGroup:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.group.sid}\r\n\tGroup Name:\t\t%{GREEDYDATA:winlog.group.groupname}\r\n\tGroup Domain:\t\t%{GREEDYDATA:winlog.group.groupdomain}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tProcess Name:\t\t%{NOTSPACE:winlog.processinformation.processname}"
        }
      }
    } else if [event][code] == "4688"{
      grok {
        match => {
          "message" => "A new process has been created.\r\n\r\nCreator Subject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.creatorsubject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.creatorsubject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:creatorsubject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nTarget Subject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.targetsubject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.targetsubject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.targetsubject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.targetsubject.logonid}\r\n\r\nProcess Information:\r\n\tNew Process ID:\t\t%{NOTSPACE:winlog.processinformation.newprocessid}\r\n\tNew Process Name:\t%{NOTSPACE:winlog.processinformation.newprocessname}\r\n\tToken Elevation Type:\t%{NOTSPACE:winlog.processinformation.tokenelevationtype}\r\n\tMandatory Label:\t\t%{NOTSPACE:winlog.processinformation.mandatorylabel}\r\n\tCreator Process ID:\t%{NOTSPACE:winlog.processinformation.creatorprocessid}\r\n\tCreator Process Name:\t%{NOTSPACE:winlog.processinformation.creatorprocessname}\r\n\tProcess Command Line:\t\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "8198"{
      grok {
        match => {
          "message" => "License Activation \(%{NOTSPACE:winlog.process}\) failed with the following error code:\r\nhr=%{DATA:winlog.error_code}\r\nCommand-line arguments:\r\nRuleId=%{NOTSPACE:winlog.rule_id};Action=%{WORD:winlog.action};AppId=%{NOTSPACE:winlog.app_id};SkuId=%{NOTSPACE:winlog.sku_id};NotificationInterval=%{NUMBER:winlog.notification_interval};Trigger=%{WORD:winlog.trigger}"
        }
      }
    } else if [event][code] == "5061"{
      grok {
        match => {
          "message" => "Cryptographic operation.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nCryptographic Parameters:\r\n\tProvider Name:\t%{GREEDYDATA:winlog.cryptographicparameters.providername}\r\n\tAlgorithm Name:\t%{GREEDYDATA:winlog.cryptographicparameters.algorithmname}\r\n\tKey Name:\t%{GREEDYDATA:winlog.cryptographicparameters.keyname}\r\n\tKey Type:\t%{GREEDYDATA:winlog.cryptographicparameters.keytype}\r\n\r\nCryptographic Operation:\r\n\tOperation:\t%{GREEDYDATA:winlog.cryptographicoperation.operation}\r\n\tReturn Code:\t%{NOTSPACE:winlog.cryptographicoperation.returncode}"
        }
      }
    } else if [event][code] == "5058"{
      grok {
        match => {
          "message" => "Key file operation.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tProcess Creation Time:\t%{TIMESTAMP_ISO8601:winlog.processinformation.processcreationtime}\r\n\r\nCryptographic Parameters:\r\n\tProvider Name:\t%{GREEDYDATA:winlog.cryptographicparameters.providername}\r\n\tAlgorithm Name:\t%{GREEDYDATA:winlog.cryptographicparameters.algorithmname}\r\n\tKey Name:\t%{GREEDYDATA:winlog.cryptographicparameters.keyname}\r\n\tKey Type:\t%{GREEDYDATA:winlog.cryptographicparameters.keytype}\r\n\r\nKey File Operation Information:\r\n\tFile Path:\t%{NOTSPACE:winlog.keyfileoperationinformation.filepath}\r\n\tOperation:\t%{GREEDYDATA:winlog.keyfileoperationinformation.operation}\r\n\tReturn Code:\t%{GREEDYDATA:keyfileoperationinformation.returncode}"
        }
      }

    } else if [event][code] == "1014"{
      grok {
        match => {
          "message" => "Acquisition of End User License failed\. hr=%{NOTSPACE:winlog.error_code}\r\nSku Id=%{NOTSPACE:winlog.sku_id}"
        }
      }
    } else if [event][code] == "1003"{
      grok {
        match => {
          "message" => "The Software Protection service has completed licensing status check\.\r\nApplication Id=%{NOTSPACE:winlog.application_id}\r\nLicensing Status=\n%{GREEDYDATA:winlog.licensing_status}"
        }
      }
    }  else if [event][code] == "1034"{
      grok {
        match => {
          "message" => "Duplicate definition of policy found. Policy name=%{GREEDYDATA:winlog.policyname}  Priority=%{NUMBER:winlog.priority}"
        }
      }
    } else if [event][code] == "4904"{
      grok {
        match => {
          "message" => "An attempt was made to register a security event source.\r\n\r\nSubject :\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nProcess:\r\n\tProcess ID:\t%{NOTSPACE:winlog.process.processid}\r\n\tProcess Name:\t%{NOTSPACE:winlog.process.processname}\r\n\r\nEvent Source:\r\n\tSource Name:\t%{GREEDYDATA:winlog.eventsource.sourcename}\r\n\tEvent Source ID:\t%{NOTSPACE:winlog.eventsource.eventsourceid}"
        }
      }
    } else if [event][code] == "5059"{
      grok {
        match => {
          "message" => "Key migration operation.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tProcess Creation Time:\t%{TIMESTAMP_ISO8601:winlog.processinformation.processcreationtime}\r\n\r\nCryptographic Parameters:\r\n\tProvider Name:\t%{GREEDYDATA:winlog.cryptographicparameters.providername}\r\n\tAlgorithm Name:\t%{GREEDYDATA:winlog.cryptographicparameters.algorithmname}\r\n\tKey Name:\t%{GREEDYDATA.winlog.cryptographicparameters.keyname}\r\n\tKey Type:\t%{GREEDYDATA:winlog.cryptographicparameters.keytype}\r\n\r\nAdditional Information:\r\n\tOperation:\t%{GREEDYDATA:winlog.additionalinformation.operation}\r\n\tReturn Code:\t%{NOTSPACE:winlog.additionalinformation.returncode}"
        }
      }
    } else if [event][code] == "8200"{
      grok {
        match => {
          "message" => "License acquisition failure details. \r\nhr=%{NOTSPACE:winlog.hr}"
        }
      }
    } else if [event][code] == "902"{
      grok {
        match => {
          "message" => "The Software Protection service has started.\r\n%{DATA:winlog.version}"
        }
      }
    } else if [event][code] == "4905"{
      grok {
        match => {
          "message" => "An attempt was made to unregister a security event source.\r\n\r\nSubject\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nProcess:\r\n\tProcess ID:\t%{NOTSPACE:winlog.process.processid}\r\n\tProcess Name:\t%{NOTSPACE:winlog.process.processname}\r\n\r\nEvent Source:\r\n\tSource Name:\t%{GREEDYDATA:winlog.eventsource.sourcename}\r\n\tEvent Source ID:\t%{NOTSPACE:winlog.eventsource.eventsourceid}"
        }
      }
    } else if [event][code] == "4625"{
      grok {
        match => {

          "message" => "An account failed to log on.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nLogon Type:\t\t\t%{NUMBER:winlog.logontype}\r\n\r\nAccount For Which Logon Failed:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.accountforwhichlogonfailed.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.accountforwhichlogonfailed.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.accountforwhichlogonfailed.accountdomain}\r\n\r\nFailure Information:\r\n\tFailure Reason:\t\t%{GREEDYDATA:winlog.failureinformation.failurereason}\r\n\tStatus:\t\t\t%{NOTSPACE:winlog.failureinformation.status}\r\n\tSub Status:\t\t%{NOTSPACE:winlog.failureinformation.substatus}\r\n\r\nProcess Information:\r\n\tCaller Process ID:\t%{NOTSPACE:winlog.processinformation.callerprocessid}\r\n\tCaller Process Name:\t%{NOTSPACE:winlog.processinformation.callerprocessname}\r\n\r\nNetwork Information:\r\n\tWorkstation Name:\t%{GREEDYDATA:winlog.networkinformation.workstationname}\r\n\tSource Network Address:\t%{IP:winlog.networkinformation.sourcenetworkaddress}\r\n\tSource Port:\t\t%{NUMBER:winlog.networkinformation.sourceport}\r\n\r\nDetailed Authentication Information:\r\n\tLogon Process:\t\t%{GREEDYDATA:winlog.detailedauthenticationinformation.logonprocess} \r\n\tAuthentication Package:\t%{GREEDYDATA:winlog.detailedauthenticationinformation.authenticationpackage}\r\n\tTransited Services:\t%{GREEDYDATA:winlog.detailedauthenticationinformation.transitedservices}\r\n\tPackage Name \(NTLM only\):\t%{GREEDYDATA:winlog.detailedauthenticationinformation.packagename}\r\n\tKey Length:\t\t%{NUMBER:winlog.detailedauthenticationinformation.keylength}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"

        }
      }
    } else if [event][code] == "4724"{
      grok {
        match => {
          "message" => "An attempt was made to reset an account's password.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nTarget Account:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.targetaccount.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.targetaccount.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.targetaccount.accountdomain}"
        }
      }
    } else if [event][code] == "5379"{
      grok {
        match => {
          "message" => "Credential Manager credentials were read.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\tRead Operation:\t\t%{GREEDYDATA:winlog.subject.readoperation}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "12"{
      grok {
        match => {
          "message" => "Process %{NOTSPACE:winlog.processpath} \(process ID:%{NUMBER:winlog.processid}\) reset policy scheme from \{%{NOTSPACE:winlog.policyschemefrom}\} to \{%{NOTSPACE:winlog.policyschemeto}\}"
        }
      }
    } else if [event][code] == "566"{
      grok {
        match => {
          "message" => "The system session has transitioned from %{NUMBER:winlog.sessionfrom} to %{NUMBER:winlog.sessionto}.\r\n\r\nReason %{GREEDYDATA:winlog.reason} \r\n\r\nBootId: %{NUMBER:winlog.winlog.bootid}"
        }
      }
    } else if [event][code] == "16"{
      grok {
        match => {
          "message" => "The access history in hive %{GREEDYDATA:winlog.hivepath} was cleared updating %{NUMBER:winlog.keys} keys and creating %{NUMBER:winlog.modifiedpages} modified pages."
        }
      }
    } else if [event][code] == "4634"{
      grok {
        match => {
          "message" => "An account was logged off.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nLogon Type:\t\t\t%{NUMBER:winlog.subject.logontype}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "4616"{
      grok {
        match => {
          "message" => "The system time was changed.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nProcess Information:\r\n\tProcess ID:\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tName:\t\t%{GREEDYDATA:winlog.processinformation.processname}\r\n\r\nPrevious Time:\t\t%{TIMESTAMP_ISO8601:winlog.previoustime}\r\nNew Time:\t\t%{TIMESTAMP_ISO8601:winlog.newtime}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "1"{
      grok {
        match => {
          "message" => "The system time has changed to %{TIMESTAMP_ISO8601:winlog.newtime} from %{TIMESTAMP_ISO8601:winlog.previoustime}.\r\n\r\nChange Reason: %{GREEDYDATA:winlog.changereason}.\r\nProcess: %{GREEDYDATA:winlog.processname} \(PID %{NUMBER:winlog.processid}\)."
        }
      }
    } else if [event][code]== "35"{
      grok {
        match => {
          "message" => "The time service is now synchronizing the system time with the time source %{NOTSPACE:winlog.timesource} \(%{NOTSPACE:winlog.ntpinfo}\) with reference id %{NOTSPACE:winlog.referenceid}. Current local stratum number is %{NUMBER:winlog.stratumnumber}."
        }
      }
    } else if [event][code] == "15"{
      grok {
        match => {
          "message" => "Hive %{GREEDYDATA:winlog.hivepath} was reorganized with a starting size of %{NUMBER:winlog.startsize} bytes and an ending size of %{NUMBER:winlog.endsize} bytes."
        }
      }
    } else if [event][code] == "8021"{
      grok {
        match => {
          "message" => "The browser service was unable to retrieve a list of servers from the browser master \\\\DESKTOP-5TS4QI9 on the network \\Device\\NetBT_Tcpip_{D3A3E827-7016-4243-95AE-C035272A330D}.\r\n \r\n Browser master: \\\\%{GREEDYDATA:winlog.browsermaster}\r\n Network: \\Device\\%{GREEDYDATA:winlog.networkdevice}\r\n \r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "1040"{
      grok {
        match => {
          "message" => "Hardware has changed from previous boot.\r\n AppId=%{NOTSPACE:winlog.appid}, SkuId=%{NOTSPACE:winlog.skuid}."
        }
      }
    } else if [event][code] == "10010"{
      grok {
        match => {
          "message" => "The server \{%{NOTSPACE:winlog.server}\} did not register with DCOM within the required timeout."
        }
      }
    } else if [event][code] == "10016"{
      grok {
        match => {
          "message" => "The application-specific permission settings do not grant Local Activation permission for the COM Server application with CLSID \r\n\{%{NOTSPACE:winlog.clsid}\}\r\n and APPID \r\n\{%{NOTSPACE:winlog.appid}\}\r\n to the user %{GREEDYDATA:winlog.user} SID \(%{NOTSPACE:winlog.user.sid}\) from address %{GREEDYDATA:winlog.address} running in the application container %{NOTSPACE:winlog.applicationcontainer} SID \(Unavailable\). This security permission can be modified using the Component Services administrative tool."
        }
      }
    } else if [event][code] == "20"{
      grok {
        match => {
          "message" => "Installation Failure: Windows failed to install the following update with error %{NOTSPACE:winlog.errorcode}: %{GREEDYDATA:winlog.updateid}."
        }
      }
    } else if [event][code] == "1001"{
      grok {
        match => {
          "message" => "Fault bucket %{GREEDYDATA:winlog.faultbucket}, type 0\r\nEvent Name: %{GREEDYDATA:winlog.eventname}\r\nResponse: Not available\r\nCab Id: %{NOTSPACE:winlog.cabid}\r\n\r\nProblem signature:\r\nP1: %{GREEDYDATA:winlog.problemsignaturepp1}\r\nP2: %{GREEDYDATA:winlog.problemsignaturepp2}\r\nP3: %{GREEDYDATA:winlog.problemsignaturepp3}\r\nP4: %{GREEDYDATA:winlog.problemsignaturepp4}\r\nP5: %{GREEDYDATA:winlog.problemsignaturepp5}\r\nP6: %{GREEDYDATA:winlog.problemsignaturepp6}\r\nP7: %{GREEDYDATA:winlog.problemsignaturepp7}\r\nP8: %{GREEDYDATA:winlog.problemsignaturepp8}\r\nP9:%{GREEDYDATA:winlog.problemsignaturepp9}\r\nP10:%{GREEDYDATA:winlog.problemsignaturepp10}\r\n\r\nAttached files:\r\n%{GREEDYDATA:winlog.attachedfiles}\r\n\r\nThese files may be available here:\r\n%{GREEDYDATA:winlog.fileslocation}\r\n\r\nAnalysis symbol: \r\nRechecking for solution: 0\r\nReport Id: %{NOTSPACE:winlog.reportid}\r\nReport Status: %{GREEDYDATA:winlog.reportstatus}\r\nHashed bucket:%{GREEDYDATA:winlog.hashedbucket}\r\nCab Guid: %{GREEDYDATA:winlog.cabguid}"
        }
      }
    } else if [event][code] == "4003"{
      grok {
        match => {
          "message" => "WLAN AutoConfig detected limited connectivity, attempting automatic recovery.\r\n\r\nRecovery Type: %{GREEDYDATA:winlog.recoverytype}\r\nError Code: %{NOTSPACE:winlog.errorcode}\r\nTrigger Reason: %{GREEDYDATA:winlog.triggereason}\r\nIP Family: %{GREEDYDATA:winlog.ipfamily}"
        }
      }
    } else if [event][code] == "5382" {
      grok {
        match => {
          "message" => "Vault credentials were read.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "10317"{
      grok {
        match => {
          "message" => "Miniport %{GREEDYDATA:winlog.miniport}, \{%{NOTSPACE:winlog.miniportid}\}, had event %{GREEDYDATA:winlog.errortype}: %{GREEDYDATA:winlog.errorinfo}"
        }
      }
    } else if [event][code] == "7045"{
      grok {
        match => {
          "message" => "A service was installed in the system.\r\n\r\nService Name:  %{NOTSPACE:winlog.servicename}\r\nService File Name:  %{GREEDYDATA:winlog.servicefilename}\r\nService Type:  %{GREEDYDATA:winlog.servicetype}\r\nService Start Type:  %{GREEDYDATA:winlog.servicestarttype}\r\nService Account:%{GREEDYDATA:winlog.serviceaccount}"
        }
      }
    } else if [event][code] == "8230"{
      grok {
        match => {
          "message" => 
"The rules engine successfully re-evaluated the schedule.\r\nKernel policies:\r\nSecurity-SPP-Action-StateData \(REG_SZ\) =AppId=%{NOTSPACE:winlog.appid};GraceEndDate=%{GREEDYDATA:winlog.graceenddate};LastConsumptionReason=0x00000000;LastNotificationId=Cleanup;LicenseState=%{GREEDYDATA:winlog.licensing_status};PartialProductKey=%{GREEDYDATA:winlog.partialproductkey};ProductKeyType=%{GREEDYDATA:winlog.productkeytype};SkuId=%{NOTSPACE:winlog.skuid};ruleId=%{NOTSPACE:winlog.ruleId};uxDifferentiator=ENVIRONMENT;volumeActivationOrder=normal"
        }
      }
    } else if [event][code] == "4647"{
      grok {
        match => {
          "message" => "User initiated logoff:\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "1074"{
      grok {
        match => {
          "message" => "The process %{GREEDYDATA:winlog.processpath} \(%{GREEDYDATA:winlog.user-initiated}\) has initiated the power off of computer %{GREEDYDATA:winlog.impactcomputer} on behalf of user %{GREEDYDATA:winlog.onbehalfofuser} for the following reason: Other \(Unplanned\)\r\n Reason Code: %{GREEDYDATA:winlog.reasoncode}\r\n Shutdown Type: %{GREEDYDATA:winlog.shutdowntype}\r\n Comment:%{GREEDYDATA:winlog.comment}"
        }
      }
    } else if [event][code] == "4902"{
      grok {
        match => {
          "message" => "The Per-user audit policy table was created.\r\n\r\nNumber of Elements:\t%{NUMBER:winlog.numberofelements}\r\nPolicy ID:\t%{NOTSPACE:winlog.policyid}"
        }
      }
    } else if [event][code] == "4826"{
      grok {
        match => {
          "message" => "Boot Configuration %{GREEDYDATA:winlog.bootconfiguration}.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nGeneral Settings:\r\n\tLoad Options:\t\t%{GREEDYDATA:winlog.generalsettings.loadoptions}\r\n\tAdvanced Options:\t\t%{GREEDYDATA:winlog.generalsettings.advancedoptions}\r\n\tConfiguration Access Policy:\t%{GREEDYDATA:winlog.generalsettings.configurationaccesspolicy}\r\n\tSystem Event Logging:\t%{GREEDYDATA:winlog.generalsettings.systemeventlogging}\r\n\tKernel Debugging:\t%{GREEDYDATA:winlog.generalsettings.kernaldebugging}\r\n\tVSM Launch Type:\t%{GREEDYDATA:winlog.generalsettings.vsmlaunchtype}\r\n\r\nSignature Settings:\r\n\tTest Signing:\t\t%{GREEDYDATA:winlog.signaturesettings.testsigning}\r\n\tFlight Signing:\t\t%{GREEDYDATA:winlog.signaturesettings.flightsigning}\r\n\tDisable Integrity Checks:\t%{GREEDYDATA:winlog.signaturesettings.disableintegritychecks}\r\n\r\nHyperVisor Settings:\r\n\tHyperVisor Load Options:\t%{GREEDYDATA:hypervisorsettings.hypervisorloadoptions}\r\n\tHyperVisor Launch Type:\t%{GREEDYDATA:hypervisorsettings.hypervisorlaunchtype}\r\n\tHyperVisor Debugging:\t%{GREEDYDATA:hypervisorsettings.hypervisordebugging}"
        }
      }
    } else if [event][code] == "4696"{
      grok {
        match => {
          "message" => "A primary token was assigned to process.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{NOTSPACE:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{NOTSPACE:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nProcess Information:\r\n\tProcess ID:\t%{NOTSPACE:winlog.processinformation.processid}\r\n\tProcess Name:\t%{GREEDYDATA:winlog.processinformation.processname}\r\n\r\nTarget Process:\r\n\tTarget Process ID:\t%{GREEDYDATA:winlog.targetprocess.targetprocessid}\r\n\tTarget Process Name:\t%{GREEDYDATA:winlog.targetprocess.targetprocessname}\r\n\r\nNew Token Information:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.newtokeninformation.sid}\r\n\tAccount Name:\t\t%{NOTSPACE:winlog.newtokeninformation.accountname}\r\n\tAccount Domain:\t\t%{NOTSPACE:winlog.newtokeninformation.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.newtokeninformation.logonid}"
        }
      }
    } else if [event][code] == "113"{
      grok {
        match => {
          "message" => 
"Attempted to add URL \(%{URI:winlog.url}\) to URL group \(%{WINPATH:winlog.urlgroup}\). Status: %{NOTSPACE:winlog.status}. Process Id %{NOTSPACE:winlog.processid} Executable path %{GREEDYDATA:winlog.executablepath}, User %{NOTSPACE:winlog.byusersid}"
        }
      }
    } else if [event][code] == "4097"{
      grok {
        match => {
          "message" => "Successful auto update of third-party root certificate:: Subject: <%{GREEDYDATA:winlog.subject.certificate}> Sha1 thumbprint: <%{NOTSPACE:winlog.subject.sha1thumbprint}>."
        }
      }
    } else if [event][code] == "8194"{
      grok {
        match => {
          "message" => "Successfully created restore point \(Process = %{GREEDYDATA:winlog.process} %{GREEDYDATA:winlog.process.args}; Description = %{GREEDYDATA:winlog.description}\)."
        }
      }
    } else if [event][code] == "1042"{
      grok {
        match => {
          "message" => "Ending a Windows Installer transaction: %{GREEDYDATA:winlog.installerfile}. Client Process Id: %{NUMBER:winlog.clientprocessid}."
        }
      }
    } else if [event][code] == "325"{
      grok {
        match => {
          "message" => "%{GREEDYDATA:winlog.processname} DS_Token_DB: The database engine created a new database \(1, %{GREEDYDATA:winlog.database}\). \(Time=0 seconds\) \r\n \r\nAdditional Data: lgposCreate = %{NOTSPACE:winlog.additionaldata.lgposCreate} \r\n \r\nInternal Timing Sequence: \n%{GREEDYDATA:winlog.internaltimingsequence}."
        }
      }
    } else if [event][code] == "11707"{
      grok {
        match => {
          "message" => "Product: %{GREEDYDATA:winlog.product} -- %{GREEDYDATA:winlog.operation}."
        }
      }
    } else if [event][code] == "4797"{
      grok {
        match => {
          "message" => "An attempt was made to query the existence of a blank password for an account.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nAdditional Information:\r\n\tCaller Workstation:\t%{GREEDYDATA:winlog.additionalinformation.callerworkstation}\r\n\tTarget Account Name:\t%{GREEDYDATA:winlog.additionalinformation.targetaccountname}\r\n\tTarget Account Domain:\t%{GREEDYDATA:winlog.additionalinformation.targetaccountdomain}"
        }
      }
    } else if [event][code] == "1000"{
      grok {
        match => {
          "message" => "Faulting application name: %{NOTSPACE:winlog.faultingapplicationname}, version: %{NOTSPACE:winlog.applicationversion}, time stamp: 0x54526aed\r\nFaulting module name: %{GREEDYDATA:winlog.faultingmodulename}, version: %{NOTSPACE:winlog.moduleversion}, time stamp: 0x9942eb68\r\nException code: %{NOTSPACE:winlog.exceptioncode}\r\nFault offset: %{NOTSPACE:winlog.faultoffset}\r\nFaulting process id: %{NOTSPACE:winlog.faultingprocessid}\r\nFaulting application start time: %{GREEDYDATA:winlog.faultingapplicationstarttime}\r\nFaulting application path: %{GREEDYDATA:winlog.faultingapplicationpath}\r\nFaulting module path: %{GREEDYDATA:winlog.faultingmodulepath}\r\nReport Id: %{NOTSPACE:winlog.reportid}\r\nFaulting package full name:%{GREEDYDATA:winlog.faultingpackagefullname}\r\nFaulting package-relative application ID:%{GREEDYDATA:winlog.faultingpackagerelativeapplicationid}"
        }
      }
    } else if [event][code] == "1002"{
      grok {
        match => {
          "message" => "The program %{GREEDYDATA:winlog.processname} version %{GREEDYDATA:winlog.processversion} stopped interacting with Windows and was closed. To see if more information about the problem is available, check the problem history in the Security and Maintenance control panel."
        }
      }
    } else if [event][code] == "5381"{
      grok {
        match => {
          "message" => "Vault credentials were read.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\n%{GREEDYDATA:winlog.extrainfo}"
        }
      }
    } else if [event][code] == "4738"{
      grok {
        match => {
          "message" => "A user account was changed.\r\n\r\nSubject:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.subject.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.subject.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.subject.accountdomain}\r\n\tLogon ID:\t\t%{NOTSPACE:winlog.subject.logonid}\r\n\r\nTarget Account:\r\n\tSecurity ID:\t\t%{NOTSPACE:winlog.targetaccount.sid}\r\n\tAccount Name:\t\t%{GREEDYDATA:winlog.targetaccount.accountname}\r\n\tAccount Domain:\t\t%{GREEDYDATA:winlog.targetaccount.accountdomain}\r\n\r\nChanged Attributes:\r\n\tSAM Account Name:\t%{GREEDYDATA:winlog.changedattributes.samaccountname}\r\n\tDisplay Name:\t\t%{GREEDYDATA:winlog.changedattributes.displayname}\r\n\tUser Principal Name:\t%{GREEDYDATA:winlog.changedattributes.userdisplayname}\r\n\tHome Directory:\t\t%{GREEDYDATA:winlog.changedattributes.homedirectory}\r\n\tHome Drive:\t\t%{GREEDYDATA:winlog.changedattributes.homedrive}\r\n\tScript Path:\t\t%{GREEDYDATA:winlog.changedattributes.scriptpath}\r\n\tProfile Path:\t\t%{GREEDYDATA:winlog.changedattributes.profilepath}\r\n\tUser Workstations:\t%{GREEDYDATA:winlog.changedattributes.userworkstations}\r\n\tPassword Last Set:\t%{GREEDYDATA:winlog.changedattributes.passwordlastset}\r\n\tAccount Expires:\t\t%{GREEDYDATA:winlog.changedattributes.accountexpires}\r\n\tPrimary Group ID:\t%{GREEDYDATA:winlog.changedattributes.primarygroupid}\r\n\tAllowedToDelegateTo:\t%{GREEDYDATA:winlog.changedattributes.allowedtodelegateto}\r\n\tOld UAC Value:\t\t%{GREEDYDATA:winlog.changedattributes.olduacvalue}\r\n\tNew UAC Value:\t\t%{GREEDYDATA:winlog.changedattributes.newuacvalue}\r\n\tUser Account Control:\t%{GREEDYDATA:winlog.changedattributes.useraccountcontrol}\r\n\tUser Parameters:\t%{GREEDYDATA:winlog.changedattributes.userparameters}\r\n\tSID History:\t\t%{GREEDYDATA:winlog.changedattributes.sidhistory}\r\n\tLogon Hours:\t\t%{GREEDYDATA:winlog.changedattributes.logonhours}\r\n\r\nAdditional Information:\r\n\tPrivileges:\t\t%{GREEDYDATA:winlog.additionalinformation.privileges}"

        }
      }
    }
  
    # Add more conditions for other event codes as needed

    # Optionally, you can remove the 'rest_of_message' field after parsing

    date {
      # 2024-07-05T18:48:21+05:00
        match => ["timestamp", "ISO8601"]
        target => "@timestamp"
        locale => "en"
      }
    mutate {
      remove_field => ["date","time","amorpm","timestamp","computername","sourcename","opcode","recordnumber","taskcategory","error_code","eventtype","eventcode","logname","user","keywords","sid","sidtype","type"]

    }


  }
  if [log_type] == "syslog" or [type] == "syslog"{
    mutate {
      copy => { "@timestamp" => "event.created" }
      # copy => { "host" => "host.hostname" }
      remove_field => ["@timestamp","host"]
    }
    grok {
    match => { "message" => "%{SYSLOGTIMESTAMP} %{GREEDYDATA}" }
    # Optional: Tag event with "_grokparsefailure" if no match
    tag_on_failure => ["no_time_stamp"]
  }
    grok {
      match => { 
        "message" => [
      # Jul 23 16:37:44 192.168.1.236 Jul 23 16:37:44 splunk systemd[1]: plymouth-quit.service: Deactivated successfully.
         
          "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} %{SYSLOGTIMESTAMP} %{DATA:hostname} %{DATA:process.name}\[%{NUMBER:process.pid}\]: %{GREEDYDATA:log_message}",
          "%{SYSLOGTIMESTAMP:timestamp} %{IP:ip1} %{SYSLOGTIMESTAMP:timestamp2} %{DATA:hostname} %{WORD:process.name}: %{USER:user} : TTY=%{NOTSPACE:tty} ; PWD=%{PATH:pwd} ; USER=%{USER:sudo_user} ; COMMAND=%{GREEDYDATA:command}",
          "%{SYSLOGTIMESTAMP:timestamp} %{WORD:program} \(%{WORD:process.name}\): %{GREEDYDATA:log_message}",
          "%{GREEDYDATA:log_message}"
        ]
      }
    }

    if [log_message] {
      grok {
        match => {
          "log_message" => [
            "PAM %{NUMBER:failures_count} more authentication failures; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{WORD:tty} ruser=%{DATA:ruser} rhost=%{IP:source_ip}  user=%{WORD:user}",
            "pam_unix\(%{WORD:service}:session\): session opened for user %{USER:user}\(uid=%{NUMBER:uid}\) by \(uid=%{NUMBER:by_uid}\)",
            "pam_unix\(%{WORD:service}:session\): session opened for user %{USER:user}\(uid=%{NUMBER:uid}\) by %{USER}\(uid=%{NUMBER:by_uid}\)",
            "pam_unix\(%{WORD:service}:session\): session closed for user %{USER:user}",
            "pam_unix\(%{WORD:service}:auth\): authentication failure; logname=%{DATA:logname} uid=%{NUMBER:uid} euid=%{NUMBER:euid} tty=%{WORD:tty} ruser= rhost=%{IP:source_ip}  user=%{USER:user}",
            "Failed password for %{USER:username} from %{IP:source.ip} port %{NUMBER:destination.port} %{WORD:ssh.protocol}",
            "Accepted password for %{USER:username} from %{IP:source.ip} port %{NUMBER:destination.port} %{WORD:ssh.protocol}",
            "rsyslogd: cannot connect to %{IP:destination.ip}:%{NUMBER:destination.port}: Connection refused \[%{NOTSPACE:event.version} try %{URI:url.original} \]",
            "PAM service\(%{WORD:service}\) ignoring max retries; %{NUMBER:retry_count} > %{NUMBER:max_retries}",
            "New session %{DATA:session.id} of user %{USER:username}.",
            # Connection closed by 192.168.1.42 port 39942 [preauth]
            "Connection closed by %{IP:source.ip} port %{NUMBER:destination.port} \[preauth\]",
            # Unable to negotiate with 192.168.1.42 port 39924: no matching host key type found. Their offer: ecdsa-sha2-nistp384 [preauth]
            "Unable to negotiate with %{IP:source.ip} port %{NUMBER:destination.port}: no matching host key type found. Their offer: %{DATA:hash_protocol} \[preauth\]",
            "%{SYSLOGTIMESTAMP:timestamp} %{IP:ip1} %{SYSLOGTIMESTAMP:timestamp2} %{SYSLOGHOST:hostname} %{WORD:process}\[%{NUMBER:pid}\]: pam_unix\(%{WORD:service}:session\): session opened for user %{USER:user}\(uid=%{NUMBER:uid}\) by \(uid=%{NUMBER:by_uid}\)",
            "\(%{USER:user}\) %{CRON_ACTION:[system][cron][action]} \(%{DATA:[system][cron][command]}\)",
            "%{WORD:status} password for %{USER:user} from %{IP:source.ip} port %{NUMBER:destination.port} %{WORD:protocol}",
            "%{TIME:time} %{LOGLEVEL:loglevel}  %{DATA:component} - \(#%{NUMBER:attempt}\) %{GREEDYDATA:message_body}",
            "%{LOGLEVEL:loglevel}: %{WORD:failures_count} authentication attempts exceeded for %{USER:user} from %{IP:source.ip} port %{NUMBER:destination.port} %{WORD:ssh.protocol} \[%{WORD:process.args}\]",
            "%{GREEDYDATA}"
            ]
        }
      }
    }
    mutate {
    lowercase => ["log_message"]
  }

  if "authentication failure" in [log_message] or "failed password" in [log_message] or "authentication attempts exceeded" in [log_message]{
     mutate {
        add_field => { 
          "[event][type]" => ["access","denied"]
          "[event][action]" =>"user_login"
          "[event][category]"=>["authentication"]
          "[event][outcome]"=>"failure"
          }
    }
  }
  else if "authentication success" in [log_message] or "accepted password" in [log_message] {
   mutate {
        add_field => { 
          "[event][type]" => ["access","allowed"]
          "[event][category]"=>["authentication"]
          "[event][outcome]"=>"success"
          "[event][action]" =>"user_login"
        }
    }
  }
  else if "ignoring max retries" in [log_message] {
   mutate {
        add_field => { 
          "[event][action]" => "authentication_configuration_change"
          "[event][category]"=>["authentication"]
          "[event][type]"=>["change"]
        }
    }
  }
    mutate {
      remove_field => [
        "headers"
      # ,"message"
      ]
    }
  if "connection refused" in [log_message] {
    mutate {
        add_field => { 
          "[event][type]" => ["denied"]
          "[event][category]"=>["network","connection"]
        }
  }}
  if "connection recieved" in [log_message] {
    mutate {
        add_field => { 
          "[event][action]" => "connection_recieved"
          "[event][category]"=>["network","connection"]
        }
  }}

  if "new session" in [log_message] or "session opened" in [log_message] {
    mutate {
        add_field => { 
          "[event][type]" => ["creation"]
          "[event][category]"=>["session"]
        }
  }}
  if "connection closed by" in [log_message] or "no matching host key type found" in [log_message] {
    mutate {
        add_field => { 
          "[event][type]" => ["start"]
          "[event][category]"=>["network"]
          "[event][action]"=>"connection_attempted"
        }
  }}
  if "no_time_stamp" in [tags] {
      mutate{
        copy => {
          "event.created" => "@timestamp"
        }
      }
      
  }
  if "encrypt" in [log_message] or "decrypt" in [log_message] or "coin" in [log_message] or "crypto" in [log_message]{
    mutate {
        add_field => { 
          "[event][type]" => ["indicator"]
          "[event][category]"=>["threat","intrusion_detection","vulnerability","malware"]
          "[event][action]" => "ransom"
        }
   
  }}
    date {
      match => ["timestamp", "MMM dd HH:mm:ss","MMM  d HH:mm:ss"]
      target => "@timestamp"
      locale => "en"
    }
  mutate {
      remove_field => ["timestamp"]
    }
}
}
output {  
  elasticsearch {
        #hosts => "http://192.168.1.103:9200"
        hosts=> "${ELASTIC_HOST:127.0.0.1:9200}"
        index => "%{index}"
  }
  stdout{}
}

#Jul 23 13:23:00 192.168.1.30 Jul 23 18:23:00 ubuntu16 sudo: vboxuser : TTY=pts/26 ; PWD=/home/vboxuser ; USER=root ; COMMAND=/usr/bin/apt purge python3-pip
#%{SYSLOGTIMESTAMP:timestamp1} %{IP:ip1} %{SYSLOGTIMESTAMP:timestamp2} %{SYSLOGHOST:hostname} %{WORD:process}: %{WORD:auth_type}\(%{WORD:auth_mechanism}\): session %{WORD:session_state} for user %{USER:user} by %{USER:by_user}\(uid=%{NUMBER:uid}\)
  # "substring1" in [message] or "substring2" in [message]
   # "%{SYSLOGTIMESTAMP:timestamp} %{IP:host} %{SYSLOGTIMESTAMP} %{SYSLOGHOST:log_source} %{WORD:process}\[%{NUMBER:pid}\]: %{TIME:time} %{LOGLEVEL:loglevel}  %{DATA:component} - \(#%{NUMBER:attempt}\) %{GREEDYDATA:message_body}",
          # "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:host} %{SYSLOGTIMESTAMP:t2}%{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}",
# Jul 23 12:30:45 192.168.1.30 Jul 23 17:30:45 ubuntu16 sshd[13723]: PAM 4 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser=someuser rhost=192.168.1.39  user=vboxuser
